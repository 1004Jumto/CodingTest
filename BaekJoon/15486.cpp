/*
* [백준 15486] 퇴사2
* 상담원으로 일하고 있는 백준이는 퇴사를 하려고 한다.
* 오늘부터 N+1일째 되는 날 퇴사를 하기 위해서, 남은 N일 동안 최대한 많은 상담을 하려고 한다.
* 백준이는 비서에게 최대한 많은 상담을 잡으라고 부탁을 했고, 비서는 하루에 하나씩 서로 다른 사람의 상담을 잡아놓았다.
* 각각의 상담은 상담을 완료하는데 걸리는 기간 Ti와 상담을 했을 때 받을 수 있는 금액 Pi로 이루어져 있다.

	N = 7인 경우에 다음과 같은 상담 일정표를 보자.

 		1일	2일	3일	4일	5일	6일	7일
	Ti	3	5	1	1	2	4	2
	Pi	10	20	10	20	15	40	200

* 1일에 잡혀있는 상담은 총 3일이 걸리며, 상담했을 때 받을 수 있는 금액은 10이다. 5일에 잡혀있는 상담은 총 2일이 걸리며, 받을 수 있는 금액은 15이다.
* 상담을 하는데 필요한 기간은 1일보다 클 수 있기 때문에, 모든 상담을 할 수는 없다. 예를 들어서 1일에 상담을 하게 되면, 2일, 3일에 있는 상담은 할 수 없게 된다. 2일에 있는 상담을 하게 되면, 3, 4, 5, 6일에 잡혀있는 상담은 할 수 없다.

* 또한, N+1일째에는 회사에 없기 때문에, 6, 7일에 있는 상담을 할 수 없다.

* 퇴사 전에 할 수 있는 상담의 최대 이익은 1일, 4일, 5일에 있는 상담을 하는 것이며, 이때의 이익은 10+20+15=45이다.

* 상담을 적절히 했을 때, 백준이가 얻을 수 있는 최대 수익을 구하는 프로그램을 작성하시오.

* [알고리즘]
* 다이나믹 프로그래밍
* 동적계획법으로 풀기 위해서는 점화식과 배열에 저장한다는 것이 포인트이다!
*
* dp[i]: i-1일까지 일을 해서 벌 수 있는 돈이라고 하자. 
* 예를 들어 dp[4]는 1~3일까지 일해서 4일날 돈을 받는다고 생각하고, 버는 금액이다. 
* 
* dp[i]의 최대금액은 어떻게 구하는가?
* 아마 둘 중 하나일 것이다.
* 1. i-1일까지 일해서 벌 수 있는 최대 액수 + i일에 일을 함으로서 벌 수 있는 돈
* 2. 기존에 설정된 i일까지 일해서 벌 수 있는 최대 액수
* 
* 주의할 점은 결국 맨 마지막까지 일한 최대 액수는 그 다음날에 저장되기 때문에 반복문을 돌때, 
* 마지막날의 다음날까지 돌아야한다는 점이고, 
* 이렇게 된다면 입력받은 금액과 일수가 outOfbound가 되기때문에 범위를 애초에 크게 잡아주고 0으로 초기화함으로써
* 범위초과의 문제를 방지한다.
*/

#include<iostream>
#include<algorithm>
#include<vector>	

#define MAX 1500001

using namespace std;

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int N, t, p; cin >> N;
	int* T = new int[MAX] {0};
	int* P = new int[MAX] {0};
	for (int i = 1; i <= N; i++) {
		cin >> t >> p;
		T[i] = t; P[i] = p;
	}

	vector<int> dp(MAX, 0);
	int amt = 0;
	for (int i = 1; i <= N + 1; i++) {
		amt = max(amt, dp[i]);
		if (i + T[i] > N+1) continue;
		else dp[i + T[i]] = max(dp[i + T[i]], amt + P[i]);
	}

	cout << amt;
	return 0;
}